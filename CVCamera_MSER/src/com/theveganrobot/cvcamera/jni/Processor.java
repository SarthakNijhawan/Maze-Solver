/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.theveganrobot.cvcamera.jni;

import com.opencv.jni.image_pool;// import the image_pool interface for playing nice with
								 // android-opencv

/** Processor - for processing images that are stored in an image pool
*/
public class Processor {
  private long swigCPtr;
  protected boolean swigCMemOwn;
  public Processor(long cPtr, boolean cMemoryOwn) {
	swigCMemOwn = cMemoryOwn;
	swigCPtr = cPtr;
  }
  public static long getCPtr(Processor obj) {
	return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        cvcameraJNI.delete_Processor(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public Processor() {
    this(cvcameraJNI.new_Processor(), true);
  }

  public void extractAndSolveMaze(int idx, image_pool pool, int feature_type) {
    cvcameraJNI.Processor_extractAndSolveMaze(swigCPtr, this, idx, image_pool.getCPtr(pool), pool, feature_type);
  }

  public void liveFeed(int idx, image_pool pool, int feature_type) {
    cvcameraJNI.Processor_liveFeed(swigCPtr, this, idx, image_pool.getCPtr(pool), pool, feature_type);
  }

  public void cleanAndFilterImage(int input_idx, image_pool pool) {
    cvcameraJNI.Processor_cleanAndFilterImage(swigCPtr, this, input_idx, image_pool.getCPtr(pool), pool);
  }

  public SWIGTYPE_p_cv__Mat convexLeftRight(SWIGTYPE_p_cv__Mat im) {
    return new SWIGTYPE_p_cv__Mat(cvcameraJNI.Processor_convexLeftRight(swigCPtr, this, SWIGTYPE_p_cv__Mat.getCPtr(im)), true);
  }

  public SWIGTYPE_p_cv__Mat convexUpDown(SWIGTYPE_p_cv__Mat im) {
    return new SWIGTYPE_p_cv__Mat(cvcameraJNI.Processor_convexUpDown(swigCPtr, this, SWIGTYPE_p_cv__Mat.getCPtr(im)), true);
  }

  public SWIGTYPE_p_cv__Mat erodeImage(SWIGTYPE_p_cv__Mat im, int se_cols, int se_rows) {
    return new SWIGTYPE_p_cv__Mat(cvcameraJNI.Processor_erodeImage(swigCPtr, this, SWIGTYPE_p_cv__Mat.getCPtr(im), se_cols, se_rows), true);
  }

  public SWIGTYPE_p_cv__Mat dilateImage(SWIGTYPE_p_cv__Mat im, int se_cols, int se_rows) {
    return new SWIGTYPE_p_cv__Mat(cvcameraJNI.Processor_dilateImage(swigCPtr, this, SWIGTYPE_p_cv__Mat.getCPtr(im), se_cols, se_rows), true);
  }

  public void morphThinning() {
    cvcameraJNI.Processor_morphThinning(swigCPtr, this);
  }

  public void morphThinning2() {
    cvcameraJNI.Processor_morphThinning2(swigCPtr, this);
  }

  public void morphThinningZS() {
    cvcameraJNI.Processor_morphThinningZS(swigCPtr, this);
  }

  public void morphThinningStentiford() {
    cvcameraJNI.Processor_morphThinningStentiford(swigCPtr, this);
  }

  public SWIGTYPE_p_cv__Mat exploreEnds(SWIGTYPE_p_cv__Mat im, int xprev, int yprev, int x, int y) {
    return new SWIGTYPE_p_cv__Mat(cvcameraJNI.Processor_exploreEnds(swigCPtr, this, SWIGTYPE_p_cv__Mat.getCPtr(im), xprev, yprev, x, y), true);
  }

  public SWIGTYPE_p_cv__Mat prune(SWIGTYPE_p_cv__Mat im, int sy, int sx, int ey, int ex) {
    return new SWIGTYPE_p_cv__Mat(cvcameraJNI.Processor_prune(swigCPtr, this, SWIGTYPE_p_cv__Mat.getCPtr(im), sy, sx, ey, ex), true);
  }

  public double euclidDistance(int y1, int x1, int y2, int x2) {
    return cvcameraJNI.Processor_euclidDistance(swigCPtr, this, y1, x1, y2, x2);
  }

  public SWIGTYPE_p_std__vectorT_cv__Point_t pruneStartEnd(SWIGTYPE_p_std__vectorT_cv__Point_t deadCopy) {
    return new SWIGTYPE_p_std__vectorT_cv__Point_t(cvcameraJNI.Processor_pruneStartEnd(swigCPtr, this, SWIGTYPE_p_std__vectorT_cv__Point_t.getCPtr(deadCopy)), true);
  }

  public SWIGTYPE_p_std__vectorT_cv__Point_t rankedExtraction(SWIGTYPE_p_std__vectorT_cv__Point_t deadCopy, SWIGTYPE_p_cv__Mat mask) {
    return new SWIGTYPE_p_std__vectorT_cv__Point_t(cvcameraJNI.Processor_rankedExtraction(swigCPtr, this, SWIGTYPE_p_std__vectorT_cv__Point_t.getCPtr(deadCopy), SWIGTYPE_p_cv__Mat.getCPtr(mask)), true);
  }

  public boolean edgeMatch(SWIGTYPE_p_cv__Mat im, int i, int j, int t) {
    return cvcameraJNI.Processor_edgeMatch(swigCPtr, this, SWIGTYPE_p_cv__Mat.getCPtr(im), i, j, t);
  }

  public boolean cornerMatch(SWIGTYPE_p_cv__Mat im, int i, int j, int t) {
    return cvcameraJNI.Processor_cornerMatch(swigCPtr, this, SWIGTYPE_p_cv__Mat.getCPtr(im), i, j, t);
  }

  public boolean checkTemplate(SWIGTYPE_p_cv__Mat im, int i, int j, int t) {
    return cvcameraJNI.Processor_checkTemplate(swigCPtr, this, SWIGTYPE_p_cv__Mat.getCPtr(im), i, j, t);
  }

  public boolean isT(SWIGTYPE_p_cv__Mat im, int i, int j) {
    return cvcameraJNI.Processor_isT(swigCPtr, this, SWIGTYPE_p_cv__Mat.getCPtr(im), i, j);
  }

  public boolean isL(SWIGTYPE_p_cv__Mat im, int i, int j) {
    return cvcameraJNI.Processor_isL(swigCPtr, this, SWIGTYPE_p_cv__Mat.getCPtr(im), i, j);
  }

  public boolean isTetris(SWIGTYPE_p_cv__Mat im, int i, int j) {
    return cvcameraJNI.Processor_isTetris(swigCPtr, this, SWIGTYPE_p_cv__Mat.getCPtr(im), i, j);
  }

  public SWIGTYPE_p_cv__Mat extractWeirdL(SWIGTYPE_p_cv__Mat im, int i, int j) {
    return new SWIGTYPE_p_cv__Mat(cvcameraJNI.Processor_extractWeirdL(swigCPtr, this, SWIGTYPE_p_cv__Mat.getCPtr(im), i, j), true);
  }

  public int connectivityNumber(SWIGTYPE_p_cv__Mat im, int i, int j) {
    return cvcameraJNI.Processor_connectivityNumber(swigCPtr, this, SWIGTYPE_p_cv__Mat.getCPtr(im), i, j);
  }

  public int neighbors(SWIGTYPE_p_cv__Mat result, int curX, int curY) {
    return cvcameraJNI.Processor_neighbors(swigCPtr, this, SWIGTYPE_p_cv__Mat.getCPtr(result), curX, curY);
  }

  public int svalue(SWIGTYPE_p_cv__Mat im, int i, int j) {
    return cvcameraJNI.Processor_svalue(swigCPtr, this, SWIGTYPE_p_cv__Mat.getCPtr(im), i, j);
  }

  public int neighbors4(SWIGTYPE_p_cv__Mat im, int i, int j) {
    return cvcameraJNI.Processor_neighbors4(swigCPtr, this, SWIGTYPE_p_cv__Mat.getCPtr(im), i, j);
  }

  public SWIGTYPE_p_cv__Mat detectStartEndRegions(SWIGTYPE_p_cv__Mat im) {
    return new SWIGTYPE_p_cv__Mat(cvcameraJNI.Processor_detectStartEndRegions(swigCPtr, this, SWIGTYPE_p_cv__Mat.getCPtr(im)), true);
  }

}
