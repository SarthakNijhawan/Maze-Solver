/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.theveganrobot.cvcamera.jni;

import com.opencv.jni.*; //import the android-opencv jni wrappers

public class cvcameraJNI {

	static {
		try {
			//load the cvcamera library, make sure that libcvcamera.so is in your <project>/libs/armeabi directory
			//so that android sdk automatically installs it along with the app.
			
			//the android-opencv lib must be loaded first inorder for the cvcamera
			//lib to be found
			//check the apk generated, by opening it in an archive manager, to verify that
			//both these libraries are present
			System.loadLibrary("android-opencv");
			System.loadLibrary("cvcamera");
		} catch (UnsatisfiedLinkError e) {
			//badness
			throw e;
		}
	}


  public final static native int DO_BIN_get();
  public final static native int DO_THIN_get();
  public final static native int DO_SOLVE_get();
  public final static native int DETECT_MSER_get();
  public final static native long new_Processor();
  public final static native void delete_Processor(long jarg1);
  public final static native void Processor_extractAndSolveMaze(long jarg1, Processor jarg1_, int jarg2, long jarg3, image_pool jarg3_, int jarg4);
  public final static native void Processor_liveFeed(long jarg1, Processor jarg1_, int jarg2, long jarg3, image_pool jarg3_, int jarg4);
  public final static native void Processor_cleanAndFilterImage(long jarg1, Processor jarg1_, int jarg2, long jarg3, image_pool jarg3_);
  public final static native long Processor_convexLeftRight(long jarg1, Processor jarg1_, long jarg2);
  public final static native long Processor_convexUpDown(long jarg1, Processor jarg1_, long jarg2);
  public final static native long Processor_erodeImage(long jarg1, Processor jarg1_, long jarg2, int jarg3, int jarg4);
  public final static native long Processor_dilateImage(long jarg1, Processor jarg1_, long jarg2, int jarg3, int jarg4);
  public final static native void Processor_morphThinning(long jarg1, Processor jarg1_);
  public final static native void Processor_morphThinning2(long jarg1, Processor jarg1_);
  public final static native void Processor_morphThinningZS(long jarg1, Processor jarg1_);
  public final static native void Processor_morphThinningStentiford(long jarg1, Processor jarg1_);
  public final static native long Processor_exploreEnds(long jarg1, Processor jarg1_, long jarg2, int jarg3, int jarg4, int jarg5, int jarg6);
  public final static native long Processor_prune(long jarg1, Processor jarg1_, long jarg2, int jarg3, int jarg4, int jarg5, int jarg6);
  public final static native double Processor_euclidDistance(long jarg1, Processor jarg1_, int jarg2, int jarg3, int jarg4, int jarg5);
  public final static native long Processor_pruneStartEnd(long jarg1, Processor jarg1_, long jarg2);
  public final static native long Processor_rankedExtraction(long jarg1, Processor jarg1_, long jarg2, long jarg3);
  public final static native boolean Processor_edgeMatch(long jarg1, Processor jarg1_, long jarg2, int jarg3, int jarg4, int jarg5);
  public final static native boolean Processor_cornerMatch(long jarg1, Processor jarg1_, long jarg2, int jarg3, int jarg4, int jarg5);
  public final static native boolean Processor_checkTemplate(long jarg1, Processor jarg1_, long jarg2, int jarg3, int jarg4, int jarg5);
  public final static native boolean Processor_isT(long jarg1, Processor jarg1_, long jarg2, int jarg3, int jarg4);
  public final static native boolean Processor_isL(long jarg1, Processor jarg1_, long jarg2, int jarg3, int jarg4);
  public final static native boolean Processor_isTetris(long jarg1, Processor jarg1_, long jarg2, int jarg3, int jarg4);
  public final static native long Processor_extractWeirdL(long jarg1, Processor jarg1_, long jarg2, int jarg3, int jarg4);
  public final static native int Processor_connectivityNumber(long jarg1, Processor jarg1_, long jarg2, int jarg3, int jarg4);
  public final static native int Processor_neighbors(long jarg1, Processor jarg1_, long jarg2, int jarg3, int jarg4);
  public final static native int Processor_svalue(long jarg1, Processor jarg1_, long jarg2, int jarg3, int jarg4);
  public final static native int Processor_neighbors4(long jarg1, Processor jarg1_, long jarg2, int jarg3, int jarg4);
  public final static native long Processor_detectStartEndRegions(long jarg1, Processor jarg1_, long jarg2);
}
